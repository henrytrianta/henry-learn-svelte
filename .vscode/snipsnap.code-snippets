{"yup-reach-3e5dfc4":{"body":["yup.reach()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup reach"],"description":"yup.reach(schema: Schema, path: string, value?: object, context?: object): Schema\n\nFor nested schemas yup.reach will retrieve a nested schema based on the provided path.For nested schemas that need to resolve dynamically, you can provide a value and optionally\na context object.let schema = object().shape({\n  nested: object().shape({\n    arr: array().of(object().shape({ num: number().max(4) }))\n  })\n});\n\nreach(schema, \"nested.arr.num\");\nreach(schema, \"nested.arr[].num\");\nreach(schema, \"nested.arr[1].num\");\nreach(schema, 'nested[\"arr\"][1].num');\n"},"yup-add-method-2d3c25a":{"body":["yup.addMethod()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup addmethod"],"description":"yup.addMethod(schemaType: Schema, name: string, method: ()=> Schema): void\n\nAdds a new method to the core schema types. A friendlier convenience method for schemaType.prototype[name] = method.yup.addMethod(yup.date, \"format\", function(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n});\n"},"yup-ref-53a7822":{"body":["yup.ref()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup ref"],"description":"yup.ref(path: string, options: { contextPrefix: string }): Ref\n\nCreates a reference to another sibling or sibling descendant field. Refs are resolved\nat validation/cast time and supported where specified. Refs are evaluated in the proper order so that\nthe ref value is resolved before the field using the ref (be careful of circular dependencies!).let schema = object({\n  baz: ref(\"foo.bar\"),\n  foo: object({\n    bar: string()\n  }),\n  x: ref(\"$x\")\n});\n\nschema.cast({ foo: { bar: \"boom\" } }, { context: { x: 5 } });\n// => { baz: 'boom',  x: 5, foo: { bar: 'boom' } }\n"},"yup-lazy-2d1c96b":{"body":["yup.lazy()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup lazy"],"description":"yup.lazy((value: any) => Schema): Lazy\n\nCreates a schema that is evaluated at validation/cast time. Useful for creating\nrecursive schema like Trees, for polymorphic fields and arrays.CAUTION! When defining parent-child recursive object schema, you want to reset the default()\nto undefined on the child otherwise the object will infinitely nest itself when you cast it!.let node = object({\n  id: number(),\n  child: yup.lazy(() => node.default(undefined))\n});\n\nlet renderable = yup.lazy(value => {\n  switch (typeof value) {\n    case \"number\":\n      return number();\n    case \"string\":\n      return string();\n    default:\n      return mixed();\n  }\n});\n\nlet renderables = array().of(renderable);\n"},"mixed-clone-80a6971":{"body":["mixed.clone()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed clone"],"description":"mixed.clone(): Schema\n\nCreates a deep copy of the schema. Clone is used internally to return a new schema with every schema state change."},"mixed-label-5a94628":{"body":["mixed.label()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed label"],"description":"mixed.label(label: string): Schema\n\nOverrides the key name which is used in error messages."},"mixed-meta-14b3393":{"body":["mixed.meta()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed meta"],"description":"mixed.meta(metadata: object): Schema\n\nAdds to a metadata object, useful for storing data with a schema, that doesn't belong\nthe cast object itself."},"mixed-describe-e9d177e":{"body":["mixed.describe()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed describe"],"description":"mixed.describe(): SchemaDescription\n\nCollects schema details (like meta, labels, and active tests) into a serializable\ndescription object.SchemaDescription {\n  type: string,\n  label: string,\n  meta: object,\n  tests: Array<{ name: string, params: object }>\n}\n"},"mixed-concat-a2e628b":{"body":["mixed.concat()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed concat"],"description":"mixed.concat(schema: Schema)\n\nCreates a new instance of the schema by combining two schemas. Only schemas of the same type can be concatenated."},"mixed-validate-c6e7986":{"body":["mixed.validate()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed validate"],"description":"mixed.validate(value: any, options?: object): Promise<any, ValidationError>\n\nReturns the value (a cast value if isStrict is false) if the value is valid, and returns the errors otherwise.\nThis method is asynchronous and returns a Promise object, that is fulfilled with the value, or rejected\nwith a ValidationError.The options argument is an object hash containing any schema options you may want to override\n(or specify for the first time).Options = {\n  strict: boolean = false;\n  abortEarly: boolean = true;\n  stripUnknown: boolean = false;\n  recursive: boolean = true;\n  context?: object;\n}\n\nstrict: only validate the input, and skip and coercion or transformation\nabortEarly: return from validation methods on the first error rather\nthan after all validations run.\nstripUnknown: remove unspecified keys from objects.\nrecursive: when false validations will not descend into nested schema\n(relevant for objects or arrays).\ncontext: any context needed for validating schema conditions (see: when())\nschema.validate({ name: \"jimmy\", age: 24 }).then(function(value) {\n  value; // => { name: 'jimmy',age: 24 }\n});\n\nschema.validate({ name: \"jimmy\", age: \"hi\" }).catch(function(err) {\n  err.name; // => 'ValidationError'\n  err.errors; // => ['age must be a number']\n});\n"},"mixed-validate-sync-a210e0a":{"body":["mixed.validateSync()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed validatesync"],"description":"mixed.validateSync(value: any, options?: object): any\n\nRuns validatations synchronously if possible and returns the resulting value,\nor throws a ValidationError. Accepts all the same options as validate.Synchronous validation only works if there are no configured async tests, e.g tests that return a Promise.\nFor instance this will work:let schema = number().test(\n  \"is-42\",\n  \"this isn't the number i want\",\n  value => value != 42\n);\n\nschema.validateSync(23); // throws ValidationError\nhowever this will not:let schema = number().test(\"is-42\", \"this isn't the number i want\", value =>\n  Promise.resolve(value != 42)\n);\n\nschema.validateSync(42); // throws Error\n"},"mixed-validate-at-1e0bd8d":{"body":["mixed.validateAt()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed validateat"],"description":"mixed.validateAt(path: string, value: any, options?: object): Promise<any, ValidationError>\n\nValidate a deeply nested path within the schema. Similar to how reach works,\nbut uses the resulting schema as the subject for validation.\nNote! The value here is the root value relative to the starting schema, not the value at the nested path.\nlet schema = object({\n  foo: array().of(\n    object({\n      loose: boolean(),\n      bar: string().when(\"loose\", {\n        is: true,\n        otherwise: s => s.strict()\n      })\n    })\n  )\n});\n\nlet rootValue = {\n  foo: [{ bar: 1 }, { bar: 1, loose: true }]\n};\n\nawait schema.validateAt(\"foo[0].bar\", rootValue); // => ValidationError: must be a string\n\nawait schema.validateAt(\"foo[1].bar\", rootValue); // => '1'\n"},"mixed-validate-sync-at-2dc3990":{"body":["mixed.validateSyncAt()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed validatesyncat"],"description":"mixed.validateSyncAt(path: string, value: any, options?: object): any\n\nSame as validateAt but synchronous."},"mixed-is-valid-68ecab1":{"body":["mixed.isValid()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed isvalid"],"description":"mixed.isValid(value: any, options?: object): Promise<boolean>\n\nReturns true when the passed in value matches the schema. isValid\nis asynchronous and returns a Promise object.Takes the same options as validate()."},"mixed-is-valid-sync-218aeb1":{"body":["mixed.isValidSync()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed isvalidsync"],"description":"mixed.isValidSync(value: any, options?: object): boolean\n\nSynchronously returns true when the passed in value matches the schema.Takes the same options as validateSync() and has the same caveats around async tests."},"mixed-cast-d86fa60":{"body":["mixed.cast()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed cast"],"description":"mixed.cast(value: any, options = {}): any\n\nAttempts to coerce the passed in value to a value that matches the schema. For example: '5' will\ncast to 5 when using the number() type. Failed casts generally return null, but may also\nreturn results like NaN and unexpected strings.options parameter can be an object containing context. (For more info on context see mixed.validate)"},"mixed-is-type-21d6a37":{"body":["mixed.isType()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed istype"],"description":"mixed.isType(value: any): boolean\n\nRuns a type check against the passed in value. It returns true if it matches,\nit does not cast the value. When nullable() is set null is considered a valid value of the type.\nYou should use isType for all Schema type checks."},"mixed-strict-c3a883a":{"body":["mixed.strict()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed strict"],"description":"mixed.strict(isStrict: boolean = false): Schema\n\nSets the strict option to true. Strict schemas skip coercion and transformation attempts,\nvalidating the value \"as is\"."},"mixed-strip-8bb0fd2":{"body":["mixed.strip()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed strip"],"description":"mixed.strip(stripField: boolean = true): Schema\n\nMarks a schema to be removed from an output object. Only works as a nested schema.let schema = object({\n  useThis: number(),\n  notThis: string().strip()\n});\n\nschema.cast({ notThis: \"foo\", useThis: 4 }); // => { useThis: 4 }\n"},"mixed-with-mutation-da3e009":{"body":["mixed.withMutation()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed withmutation"],"description":"mixed.withMutation(builder: (current: Schema) => void): void\n\nFirst the legally required Rich Hickey quote:\nIf a tree falls in the woods, does it make a sound?\nIf a pure function mutates some local data in order to produce an immutable return value, is that ok?\nwithMutation allows you to mutate the schema in place, instead of the default behavior which clones before each change.\nGenerally this isn't necessary since the vast majority of schema changes happen during the initial\ndeclaration, and only happen once over the lifetime of the schema, so performance isn't an issue.\nHowever certain mutations do occur at cast/validation time, (such as conditional schema using when()), or\nwhen instantiating a schema object.object()\n  .shape({ key: string() })\n  .withMutation(schema => {\n    return arrayOfObjectTests.forEach(test => {\n      schema.test(test);\n    });\n  });\n"},"mixed-default-93cc421":{"body":["mixed.default()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed default"],"description":"mixed.default(): Any\n\nCalling default with no arguments will return the current default value"},"mixed-nullable-bd13e6d":{"body":["mixed.nullable()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed nullable"],"description":"mixed.nullable(isNullable: boolean = true): Schema\n\nIndicates that null is a valid value for the schema. Without nullable()\nnull is treated as a different type and will fail isType() checks."},"mixed-required-0614ea1":{"body":["mixed.required()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed required"],"description":"mixed.required(message?: string | function): Schema\n\nMark the schema as required. All field values apart from undefined and null meet this requirement."},"mixed-not-required-0fbf5c9":{"body":["mixed.notRequired()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed notrequired"],"description":"mixed.notRequired(): Schema\n\nMark the schema as not required. Passing undefined as value will not fail validation."},"mixed-type-error-c0082bd":{"body":["mixed.typeError()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed typeerror"],"description":"mixed.typeError(message: string): Schema\n\nDefine an error message for failed type checks. The ${value} and ${type} interpolation can\nbe used in the message argument."},"mixed-one-of-c4be342":{"body":["mixed.oneOf()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed oneof"],"description":"mixed.oneOf(arrayOfValues: Array<any>, message?: string | function): Schema Alias: equals\n\nWhitelist a set of values. Values added are automatically removed from any blacklist if they are in it.\nThe ${values} interpolation can be used in the message argument.Note that undefined does not fail this validator, even when undefined is not included in arrayOfValues.\nIf you don't want undefined to be a valid value, you can use mixed.required.let schema = yup.mixed().oneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => true\nawait schema.isValid(\"jimmy\"); // => true\nawait schema.isValid(new Date()); // => false\n"},"mixed-not-one-of-1547e43":{"body":["mixed.notOneOf()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed notoneof"],"description":"mixed.notOneOf(arrayOfValues: Array<any>, message?: string | function)\n\nBlacklist a set of values. Values added are automatically removed from any whitelist if they are in it.\nThe ${values} interpolation can be used in the message argument.let schema = yup.mixed().notOneOf([\"jimmy\", 42]);\n\nawait schema.isValid(42); // => false\nawait schema.isValid(new Date()); // => true\n"},"mixed-when-128ee84":{"body":["mixed.when()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed when"],"description":"mixed.when(keys: string | Array<string>, builder: object | (value, schema)=> Schema): Schema\n\nAdjust the schema based on a sibling or sibling children fields. You can provide an object\nliteral where the key is is value or a matcher function, then provides the true schema and/or\notherwise for the failure condition.is conditions are strictly compared (===) if you want to use a different form of equality you\ncan provide a function like: is: (value) => value == true.Like joi you can also prefix properties with $ to specify a property that is dependent\non context passed in by validate() or isValid. when conditions are additive.let schema = object({\n  isBig: boolean(),\n  count: number()\n    .when(\"isBig\", {\n      is: true, // alternatively: (val) => val == true\n      then: yup.number().min(5),\n      otherwise: yup.number().min(0)\n    })\n    .when(\"$other\", (other, schema) => (other === 4 ? schema.max(6) : schema))\n});\n\nawait schema.validate(value, { context: { other: 4 } });\nYou can also specify more than one dependent key, in which case each value will be spread as an argument.let schema = object({\n  isSpecial: boolean(),\n  isBig: boolean(),\n  count: number().when([\"isBig\", \"isSpecial\"], {\n    is: true, // alternatively: (isBig, isSpecial) => isBig && isSpecial\n    then: yup.number().min(5),\n    otherwise: yup.number().min(0)\n  })\n});\n\nawait schema.validate({\n  isBig: true,\n  isSpecial: true,\n  count: 10\n});\nAlternatively you can provide a function that returns a schema\n(called with the value of the key and the current schema).let schema = yup.object({\n  isBig: yup.boolean(),\n  count: yup.number().when(\"isBig\", (isBig, schema) => {\n    return isBig ? schema.min(5) : schema.min(0);\n  })\n});\n\nawait schema.validate({ isBig: false, count: 4 });\n"},"mixed-test-e4353a4":{"body":["mixed.test()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed test"],"description":"mixed.test(options: object): Schema\n\nAlternative test(..) signature. options is an object containing some of the following options:Options = {\n  // unique name identifying the test\n  name: string;\n  // test function, determines schema validity\n  test: (value: any) => boolean;\n  // the validation error message\n  message: string;\n  // values passed to message for interpolation\n  params: ?object;\n  // mark the test as exclusive, meaning only one of the same can be active at once\n  exclusive: boolean = false;\n}\nIn the case of mixing exclusive and non-exclusive tests the following logic is used.\nIf a non-exclusive test is added to a schema with an exclusive test of the same name\nthe exclusive test is removed and further tests of the same name will be stacked.If an exclusive test is added to a schema with non-exclusive tests of the same name\nthe previous tests are removed and further tests of the same name will replace each other.let max = 64;\nlet schema = yup.mixed().test({\n  name: \"max\",\n  exclusive: true,\n  params: { max },\n  message: \"${path} must be less than ${max} characters\",\n  test: value => value == null || value.length <= max\n});\n"},"mixed-transform-fd3d10d":{"body":["mixed.transform()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup mixed transform"],"description":"mixed.transform((currentValue: any, originalValue: any) => any): Schema\n\nAdds a transformation to the transform chain. Transformations are central to the casting process,\ndefault transforms for each type coerce values to the specific type (as verified by isType()).\ntransforms are run before validations and only applied when strict is true. Some types have built in transformations.Transformations are useful for arbitrarily altering how the object is cast, however, you should take care\nnot to mutate the passed in value. Transforms are run sequentially so each value represents the\ncurrent state of the cast, you can use the originalValue param if you need to work on the raw initial value.let schema = string().transform(function(value, originalvalue) {\n  return this.isType(value) && value !== null ? value.toUpperCase() : value;\n});\n\nschema.cast(\"jimmy\"); // => 'JIMMY'\nEach types will handle basic coercion of values to the proper type for you, but occasionally\nyou may want to adjust or refine the default behavior. For example, if you wanted to use a different\ndate parsing strategy than the default one you could do that with a transform.module.exports = function(formats = \"MMM dd, yyyy\") {\n  return date().transform(function(value, originalvalue) {\n    // check to see if the previous transform already parsed the date\n    if (this.isType(value)) return value;\n\n    // the default coercion failed so lets try it with Moment.js instead\n    value = Moment(originalValue, formats);\n\n    // if its valid return the date object, otherwise return an `InvalidDate`\n    return value.isValid() ? value.toDate() : new Date(\"\");\n  });\n};\nstringDefine a string schema. Supports all the same methods as mixed.let schema = yup.string();\n\nawait schema.isValid(\"hello\"); // => true\nBy default, the cast logic of string is to call toString on the value if it exists.\nempty values are not coerced (use ensure() to coerce empty values to empty strings).Failed casts return the input value."},"string-required-1d18b0d":{"body":["string.required()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string required"],"description":"string.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty strings are also considered 'missing' values."},"string-length-abc1f31":{"body":["string.length()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string length"],"description":"string.length(limit: number | Ref, message?: string | function): Schema\n\nSet a required length for the string value. The ${length} interpolation can be used in the message argument"},"string-min-fdb6ea9":{"body":["string.min()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string min"],"description":"string.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the string value. The ${min} interpolation can be used in the message argument"},"string-max-7c867b3":{"body":["string.max()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string max"],"description":"string.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the string value. The ${max} interpolation can be used in the message argument"},"string-matches-7aae1f0":{"body":["string.matches()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string matches"],"description":"string.matches(regex: Regex, options: { message: string, excludeEmptyString: bool }): Schema\n\nAn alternate signature for string.matches with an options object. excludeEmptyString, when true,\nshort circuits the regex test when the value is an empty stringlet schema = string().matches(/(hi|bye)/, { excludeEmptyString: true });\n\nawait schema.isValid(\"\"); // => true\n"},"string-email-1b8dec7":{"body":["string.email()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string email"],"description":"string.email(message?: string | function): Schema\n\nValidates the value as an email address via a regex."},"string-url-539d35c":{"body":["string.url()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string url"],"description":"string.url(message?: string | function): Schema\n\nValidates the value as a valid URL via a regex."},"string-ensure-124902a":{"body":["string.ensure()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string ensure"],"description":"string.ensure(): Schema\n\nTransforms undefined and null values to an empty string along with\nsetting the default to an empty string."},"string-trim-e876af2":{"body":["string.trim()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string trim"],"description":"string.trim(message?: string | function): Schema\n\nTransforms string values by removing leading and trailing whitespace. If\nstrict() is set it will only validate that the value is trimmed."},"string-lowercase-a28a3f3":{"body":["string.lowercase()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string lowercase"],"description":"string.lowercase(message?: string | function): Schema\n\nTransforms the string value to lowercase. If strict() is set it\nwill only validate that the value is lowercase."},"string-uppercase-092c5b6":{"body":["string.uppercase()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup string uppercase"],"description":"string.uppercase(message?: string | function): Schema\n\nTransforms the string value to uppercase. If strict() is set it\nwill only validate that the value is uppercase.numberDefine a number schema. Supports all the same methods as mixed.let schema = yup.number();\n\nawait schema.isValid(10); // => true\nThe default cast logic of number is: parseFloat.Failed casts return NaN."},"number-min-d7b3784":{"body":["number.min()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number min"],"description":"number.min(limit: number | Ref, message?: string | function): Schema\n\nSet the minimum value allowed. The ${min} interpolation can be used in the\nmessage argument."},"number-max-03aac06":{"body":["number.max()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number max"],"description":"number.max(limit: number | Ref, message?: string | function): Schema\n\nSet the maximum value allowed. The ${max} interpolation can be used in the\nmessage argument."},"number-less-than-96ada47":{"body":["number.lessThan()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number lessthan"],"description":"number.lessThan(max: number | Ref, message?: string | function): Schema\n\nValue must be less than max. The ${less} interpolation can be used in the\nmessage argument."},"number-more-than-cac9b10":{"body":["number.moreThan()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number morethan"],"description":"number.moreThan(min: number | Ref, message?: string | function): Schema\n\nValue must be strictly greater than min. The ${more} interpolation can be used in the\nmessage argument."},"number-positive-5a01999":{"body":["number.positive()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number positive"],"description":"number.positive(message?: string | function): Schema\n\nValue must be a positive number."},"number-negative-4a1d726":{"body":["number.negative()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number negative"],"description":"number.negative(message?: string | function): Schema\n\nValue must be a negative number."},"number-integer-622df1d":{"body":["number.integer()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number integer"],"description":"number.integer(message?: string | function): Schema\n\nValidates that a number is an integer."},"number-truncate-0b03a23":{"body":["number.truncate()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number truncate"],"description":"number.truncate(): Schema\n\nTransformation that coerces the value to an integer by stripping off the digits\nto the right of the decimal point."},"number-round-e689f66":{"body":["number.round()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup number round"],"description":"number.round(type: 'floor' | 'ceil' | 'trunc' | 'round' = 'round'): Schema\n\nAdjusts the value via the specified method of Math (defaults to 'round').booleanDefine a boolean schema. Supports all the same methods as mixed.let schema = yup.boolean();\n\nawait schema.isValid(true); // => true\ndateDefine a Date schema. By default ISO date strings will parse correctly,\nfor more robust parsing options see the extending schema types at the end of the readme.\nSupports all the same methods as mixed.let schema = yup.date();\n\nawait schema.isValid(new Date()); // => true\nThe default cast logic of date is pass the value to the Date constructor, failing that, it will attempt\nto parse the date as an ISO date string.Failed casts return an invalid Date."},"date-min-fb2a5e2":{"body":["date.min()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup date min"],"description":"date.min(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the minimum date allowed. When a string is provided it will attempt to cast to a date first\nand use the result as the limit."},"date-max-b35d0c5":{"body":["date.max()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup date max"],"description":"date.max(limit: Date | string | Ref, message?: string | function): Schema\n\nSet the maximum date allowed, When a string is provided it will attempt to cast to a date first\nand use the result as the limit.arrayDefine an array schema. Arrays can be typed or not, When specifying the element type, cast and isValid\nwill apply to the elements as well. Options passed into isValid are passed also passed to child schemas.\nSupports all the same methods as mixed.let schema = yup.array().of(yup.number().min(2));\n\nawait schema.isValid([2, 3]); // => true\nawait schema.isValid([1, -24]); // => false\n\nschema.cast([\"2\", \"3\"]); // => [2, 3]\nYou can also pass a subtype schema to the array constructor as a convenience.array().of(yup.number());\n// or\narray(yup.number());\nThe default cast behavior for array is: JSON.parseFailed casts return: null;"},"array-of-0543fba":{"body":["array.of()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array of"],"description":"array.of(type: Schema): Schema\n\nSpecify the schema of array elements. of() is optional and when omitted the array schema will\nnot validate its contents."},"array-required-16dddc5":{"body":["array.required()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array required"],"description":"array.required(message?: string | function): Schema\n\nThe same as the mixed() schema required, except that empty arrays are also considered 'missing' values."},"array-min-c9d4e2d":{"body":["array.min()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array min"],"description":"array.min(limit: number | Ref, message?: string | function): Schema\n\nSet a minimum length limit for the array. The ${min} interpolation can be used in the message argument."},"array-max-f6fc442":{"body":["array.max()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array max"],"description":"array.max(limit: number | Ref, message?: string | function): Schema\n\nSet a maximum length limit for the array. The ${max} interpolation can be used in the message argument."},"array-ensure-dd2a323":{"body":["array.ensure()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array ensure"],"description":"array.ensure(): Schema\n\nEnsures that the value is an array, by setting the default to [] and transforming null and undefined\nvalues to an empty array as well. Any non-empty, non-array value will be wrapped in an array.array()\n  .ensure()\n  .cast(null); // => []\narray()\n  .ensure()\n  .cast(1); // => [1]\narray()\n  .ensure()\n  .cast([1]); // => [1]\n"},"array-compact-e0b3b59":{"body":["array.compact()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup array compact"],"description":"array.compact(rejector: (value) => boolean): Schema\n\nRemoves falsey values from the array. Providing a rejecter function lets you specify the rejection criteria yourself.array()\n  .compact()\n  .cast([\"\", 1, 0, 4, false, null]); // => [1, 4]\n\narray()\n  .compact(function(v) {\n    return v == null;\n  })\n  .cast([\"\", 1, 0, 4, false, null]); // => ['', 1, 0, 4, false]\nobjectDefine an object schema. Options passed into isValid are also passed to child schemas.\nSupports all the same methods as mixed.yup.object().shape({\n  name: string().required(),\n  age: number()\n    .required()\n    .positive()\n    .integer(),\n  email: string().email(),\n  website: string().url()\n});\nYou can also pass a shape to the object constructor as a convenience.object().shape({\n  num: number()\n});\n// or\nobject({\n  num: number()\n});\nThe default cast behavior for object is: JSON.parseFailed casts return: null;"},"object-shape-8cceb4e":{"body":["object.shape()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup object shape"],"description":"object.shape(fields: object, noSortEdges?: Array<[string, string]>): Schema\n\nDefine the keys of the object and the schemas for said keys.Note that you can chain shape method, which acts like object extends, for example:object({\n  a: string(),\n  b: number()\n}).shape({\n  b: string(),\n  c: number()\n});\nwould be exactly the same as:object({\n  a: string(),\n  b: string(),\n  c: number()\n});\n"},"object-from-f51a455":{"body":["object.from()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup object from"],"description":"object.from(fromKey: string, toKey: string, alias: boolean = false): Schema\n\nTransforms the specified key to a new key. If alias is true then the old key will be left.let schema = object({\n  myProp: mixed(),\n  Other: mixed()\n})\n  .from(\"prop\", \"myProp\")\n  .from(\"other\", \"Other\", true);\n\nschema.cast({ prop: 5, other: 6 }); // => { myProp: 5, other: 6, Other: 6 }\n"},"object-no-unknown-ede447a":{"body":["object.noUnknown()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup object nounknown"],"description":"object.noUnknown(onlyKnownKeys: boolean = true, message?: string | function): Schema\n\nValidate that the object value only contains keys specified in shape, pass false as the first\nargument to disable the check. Restricting keys to known, also enables stripUnknown option, when not in strict mode."},"object-camel-case-82c24aa":{"body":["object.camelCase()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup object camelcase"],"description":"object.camelCase(): Schema\n\nTransforms all object keys to camelCase"},"object-constant-case-c936263":{"body":["object.constantCase()"],"scope":"javascript,javascriptreact,typescript,typescriptreact","prefix":["yup object constantcase"],"description":"object.constantCase(): Schema\n\nTransforms all object keys to CONSTANT_CASE.Extending Schema TypesThe simplest way to extend an existing type is just to cache a configured schema and use that through your application.let yup = require(\"yup\");\nlet parseFormats = [\"MMM dd, yyy\"];\nlet invalidDate = new Date(\"\");\n\nmodule.exports = yup.date().transform(function(value, originalValue) {\n  if (this.isType(value)) return value;\n  // the default coercion transform failed so lets try it with Moment instead\n  value = Moment(originalValue, parseFormats);\n  return value.isValid() ? value.toDate() : invalidDate;\n});\nAlternatively, each schema is a normal JavaScript constructor function that you can mutate or delegate to\nusing the normal patterns. Generally you should not inherit from mixed unless you know what you are doing,\nbetter to think of it as an abstract class. The other types are fair game though.You should keep in mind some basic guidelines when extending schemas\nnever mutate an existing schema, always clone() and then mutate the new one before returning it.\nBuilt-in methods like test and transform take care of this for you, so you can safely use them (see below) without worrying\ntransforms should never mutate the value passed in, and should return an invalid object when one exists\n(NaN, InvalidDate, etc) instead of null for bad values.\nby the time validations run the value is guaranteed to be the correct type, however if nullable is\nset then null is a valid value for that type, so don't assume that a property or method exists on the value.\nAdjust core Typeslet invalidDate = new Date(\"\");\n\nfunction parseDateFromFormats(formats, parseStrict) {\n  return this.transform(function(value, originalValue) {\n    if (this.isType(value)) return value;\n\n    value = Moment(originalValue, formats, parseStrict);\n\n    return value.isValid() ? value.toDate() : invalidDate;\n  });\n}\n\n// `addMethod` doesn't do anything special it's\n// equivalent to: yup.date.prototype.format = parseDateFromFormats\nyup.addMethod(yup.date, \"format\", parseDateFromFormats);\nCreating new TypesYup schema use the common constructor pattern for modeling inheritance. You can use any\nutility or pattern that works with that pattern. The below demonstrates using the es6 class\nsyntax since its less verbose, but you absolutely aren't required to use it.let DateSchema = yup.date;\nlet invalidDate = new Date(\"\"); // our failed to coerce value\n\nclass MomentDateSchemaType extends DateSchema {\n  constructor() {\n    super();\n    this._validFormats = [];\n\n    this.withMutation(() => {\n      this.transform(function(value, originalvalue) {\n        if (this.isType(value))\n          // we have a valid value\n          return value;\n        return Moment(originalValue, this._validFormats, true);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    return (\n      super._typeCheck(value) || (moment.isMoment(value) && value.isValid())\n    );\n  }\n\n  format(formats) {\n    if (!formats) throw new Error(\"must enter a valid format\");\n    let next = this.clone();\n    next._validFormats = {}.concat(formats);\n  }\n}\n\nlet schema = new MomentDateSchemaType();\n\nschema.format(\"YYYY-MM-DD\").cast(\"It is 2012-05-25\"); // => Fri May 25 2012 00:00:00 GMT-0400 (Eastern Daylight Time)\nTypeScript SupportIf you are using TypeScript installing the Yup typings is recommendednpm install -D @types/yup\nYou can now infer a TypeScript type alias using the exported InferType. Given the following Yup schema:import * as yup from 'yup';\n\nconst personSchema = yup.object({\n  firstName: yup\n    .string(),\n  nickName: yup\n    .string()\n    .nullable(),\n  gender: yup\n    .mixed<'male' | 'female' | 'other'>()\n    .oneOf(['male', 'female', 'other']),\n  email: yup\n    .string()\n    .nullable()\n    .notRequired()\n    .email(),\n  birthDate: yup\n    .date()\n    .nullable()\n    .notRequired()\n    .min(new Date(1900, 0, 1)),\n});\nYou can derive the TypeScript type as follows:type Person = yup.InferType<typeof personSchema>;\nWhich is equivalent to the following TypeScript type alias:type Person = {\n  firstName: string;\n  nickName: string | null;\n  gender: \"male\" | \"female\" | \"other\";\n  email?: string | null | undefined;\n  birthDate?: Date | null | undefined;\n}\nMaking the following objects valid both for TypeScript and Yup validation:const minimalPerson: Person = {\n    firstName: \"Matt\",\n    nickName: null,\n    gender: \"male\"\n};\n\nconst fullPerson: Person = {\n    firstName: \"Matt\",\n    nickName: \"The Hammer\",\n    gender: \"male\",\n    email: \"matt@the-hammer.com\",\n    birthDate: new Date(1976, 9, 5)\n};\n"},"dotenv-require-b8a251d":{"scope":"javascript,typescript","prefix":["dotenv require"],"body":["require('dotenv').config()"],"description":"As early as possible in your application, require and configure dotenv."},"dotenv-path-127844b":{"scope":"javascript,typescript","prefix":["dotenv path"],"body":["require('dotenv').config({ path: '${1:/full/custom/path/to/your/env/vars}' })"],"description":"You may specify a custom path if your file containing environment variables is located elsewhere."},"dotenv-encoding-73b738f":{"scope":"javascript,typescript","prefix":["dotenv encoding"],"body":["require('dotenv').config({ encoding: '${1:latin1}' })"],"description":"You may specify the encoding of your file containing environment variables."},"dotenv-debug-f5f30c7":{"scope":"javascript,typescript","prefix":["dotenv debug"],"body":["require('dotenv').config({ debug: ${1|true,false|} })"],"description":"You may turn on logging to help debug why certain keys or values are not being set as you expect."},"var-assignment-411b622":{"prefix":["base var"],"body":["var ${1:name} = ${2:value};"],"description":"var assignment","scope":"javascript,javascriptreact,typescript,typescriptreact"},"let-assignment-5ec2f75":{"prefix":["base let"],"body":["let ${1:name} = ${2:value};"],"description":"let assignment","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructuring-let-assignment-cb4b3f2":{"prefix":["base let destruct object"],"body":["let {${1:name}} = ${2:value};"],"description":"Object destructing","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructuring-let-array-d693a16":{"prefix":["base let destruct array"],"body":["let [${1:name}] = ${2:value};"],"description":"Array destructing","scope":"javascript,javascriptreact,typescript,typescriptreact"},"const-assignment-3882230":{"prefix":["base const"],"body":["const ${1:name} = ${2:value};"],"description":"const assignment","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructuring-const-assignment-3bedb18":{"prefix":["base const destruct object"],"body":["const {${1:name}} = ${2:value};"],"description":"Object destructing","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructingarray-ff5c0be":{"prefix":["base const destruct array"],"body":["const [${2:propertyName}] = ${1:arrayToDestruct};"],"description":"Array destructing","scope":"javascript,javascriptreact,typescript,typescriptreact"},"if-statement-4f7664a":{"prefix":["base if"],"body":["if (${1:condition}) {\n\t${0}\n}"],"description":"if statement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"else-statement-8019679":{"prefix":["base else"],"body":["else {\n\t${0}\n}"],"description":"else statement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"if-else-statement-0da01e0":{"prefix":["base if else"],"body":["if (${1:condition}) {\n\t${0}\n} else {\n\t\n}"],"description":"if/else statement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"else-if-statement-3bf0944":{"prefix":["base else if"],"body":["else if (${1:condition}) {\n\t${0}\n}"],"description":"else if statement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"ternary-operator-d577c8d":{"prefix":["base ternary operator"],"body":["${1:condition} ? ${2:expression} : ${3:expression};"],"description":"ternary operator","scope":"javascript,javascriptreact,typescript,typescriptreact"},"for-loop-45777a2":{"prefix":["base for"],"body":["for (let ${1:i} = 0, ${2:len} = ${3:iterable}.length; ${1:i} < ${2:len}; ${1:i}++) {\n\t${0}\n}"],"description":"for loop","scope":"javascript,javascriptreact,typescript,typescriptreact"},"reverse-for-loop-5a7dc59":{"prefix":["base for reverse"],"body":["for (let ${1:i} = ${2:iterable}.length - 1; ${1:i} >= 0; ${1:i}--) {\n\t${0}\n}"],"description":"reverse for loop","scope":"javascript,javascriptreact,typescript,typescriptreact"},"for-in-loop-f4b42c5":{"prefix":["base for in"],"body":["for (let ${1:key} in ${2:array}) {\n\tif (${2:array}.hasOwnProperty(${1:key})) {\n\t\t${0}\n\t}\n}"],"description":"for in loop","scope":"javascript,javascriptreact,typescript,typescriptreact"},"for-of-loop-es6--7d51361":{"prefix":["base for of"],"body":["for (let ${1:key} of ${2:array}) {\n\t${0}\n}"],"description":"for of loop (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"while-loop-a72bb64":{"prefix":["base while"],"body":["while (${1:condition}) {\n\t${0}\n}"],"description":"while loop","scope":"javascript,javascriptreact,typescript,typescriptreact"},"try-catch-2f4efee":{"prefix":["base try catch"],"body":["try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"],"description":"try/catch","scope":"javascript,javascriptreact,typescript,typescriptreact"},"try-finally-9ba26a6":{"prefix":["base try finally"],"body":["try {\n\t${0}\n} finally {\n\t\n}"],"description":"try/finally","scope":"javascript,javascriptreact,typescript,typescriptreact"},"try-catch-finally-f6535e6":{"prefix":["base try catch finally"],"body":["try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"],"description":"try/catch/finally","scope":"javascript,javascriptreact,typescript,typescriptreact"},"switch-case-5f707c3":{"prefix":["base switch case"],"body":["switch (${1:expr}) {\n\tcase ${2:value}:\n\t\treturn $0;\n\tdefault:\n\t\treturn;\n}"],"description":"switch case","scope":"javascript,javascriptreact,typescript,typescriptreact"},"anonymous-function-8b88a03":{"prefix":["base function anonymous"],"body":["function (${1:arguments}) {\n\t${0}\n}"],"description":"anonymous function","scope":"javascript,javascriptreact,typescript,typescriptreact"},"named-function-d25eaf4":{"prefix":["base function named"],"body":["function ${1:name}(${2:arguments}) {\n\t${0}\n}"],"description":"named function","scope":"javascript,javascriptreact,typescript,typescriptreact"},"immediately-invoked-function-expression-iife--0c9a12f":{"prefix":["base function immediate"],"body":["((${1:arguments}) => {\n\t${0}\n})(${2});"],"description":"immediately-invoked function expression (IIFE)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"function-apply-0e4ee66":{"prefix":["base function apply"],"body":["${1:fn}.apply(${2:this}, ${3:arguments})"],"description":"function apply","scope":"javascript,javascriptreact,typescript,typescriptreact"},"function-call-4c8e482":{"prefix":["base function call"],"body":["${1:fn}.call(${2:this}, ${3:arguments})"],"description":"function call","scope":"javascript,javascriptreact,typescript,typescriptreact"},"function-bind-07ab16e":{"prefix":["base function bind"],"body":["${1:fn}.bind(${2:this}, ${3:arguments})"],"description":"function bind","scope":"javascript,javascriptreact,typescript,typescriptreact"},"arrow-function-es6--82bc5b9":{"prefix":["base function arrow"],"body":["(${1:arguments}) => ${2:statement}"],"description":"arrow function (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"arrow-function-with-body-es6--1419255":{"prefix":["base function arrow body"],"body":["(${1:arguments}) => {\n\t${0}\n}"],"description":"arrow function with body (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"generator-function-es6--0663b6b":{"prefix":["base function generator"],"body":["function* (${1:arguments}) {\n\t${0}\n}"],"description":"generator function (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"named-generator-function-es6--1410553":{"prefix":["base function generator named"],"body":["function* ${1:name}(${2:arguments}) {\n\t${0}\n}"],"description":"named generator function (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"sequence-of-0-n-4e0409d":{"prefix":["base sequence of"],"body":["[...Array(${1:length}).keys()]${0}"],"description":"sequence of 0..n","scope":"javascript,javascriptreact,typescript,typescriptreact"},"foreach-loop-481be63":{"prefix":["base foreach"],"body":["${1}.forEach((${2:item}) => {\n\t${0}\n});"],"description":"forEach loop","scope":"javascript,javascriptreact,typescript,typescriptreact"},"map-a1ee187":{"prefix":["base map"],"body":["${1}.map((${2:item}) => {\n\t${0}\n});"],"description":"map","scope":"javascript,javascriptreact,typescript,typescriptreact"},"reduce-5c10859":{"prefix":["base reduce"],"body":["${1}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial});"],"description":"reduce","scope":"javascript,javascriptreact,typescript,typescriptreact"},"filter-4496b0f":{"prefix":["base filter"],"body":["${1}.filter(${2:item} => {\n\t${0}\n});"],"description":"filter","scope":"javascript,javascriptreact,typescript,typescriptreact"},"find-8795af4":{"prefix":["base find"],"body":["${1}.find(${2:item} => {\n\t${0}\n});"],"description":"find","scope":"javascript,javascriptreact,typescript,typescriptreact"},"class-es6--231af3c":{"prefix":["base class"],"body":["class ${1:name} {\n\tconstructor(${2:arguments}) {\n\t\t${0}\n\t}\n}"],"description":"class (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"child-class-es6--49cfcee":{"prefix":["base child class"],"body":["class ${1:name} extends ${2:base} {\n\tconstructor(${3:arguments}) {\n\t\tsuper(${3:arguments});\n\t\t${0}\n\t}\n}"],"description":"child class (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"class-constructor-es6--e84a3e1":{"prefix":["base class constructor"],"body":["constructor(${1:arguments}) {\n\tsuper(${1:arguments});${0}\n}"],"description":"class constructor (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"method-es6-syntax--2967249":{"prefix":["base method"],"body":["${1:method}(${2:arguments}) {\n\t${0}\n}"],"description":"method (ES6 syntax)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"getter-es6-syntax--90c9824":{"prefix":["base getter"],"body":["get ${1:property}() {\n\t${0}\n}"],"description":"getter (ES6 syntax)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"setter-es6-syntax--447e460":{"prefix":["base setter"],"body":["set ${1:property}(${2:value}) {\n\t${0}\n}"],"description":"setter (ES6 syntax)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"getter-and-setter-es6-syntax--c12be7d":{"prefix":["base getter setter"],"body":["get ${1:property}() {\n\t${0}\n}\nset ${1:property}(${2:value}) {\n\t\n}"],"description":"getter and setter (ES6 syntax)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"prototype-method-dcec465":{"prefix":["base prototype method"],"body":["${1:Class}.prototype.${2:method} = function(${3:arguments}) {\n\t${0}\n};"],"description":"prototype method","scope":"javascript,javascriptreact,typescript,typescriptreact"},"object-assign-10c91f2":{"prefix":["base object assign"],"body":["Object.assign(${1:dest}, ${2:source})"],"description":"Object.assign","scope":"javascript,javascriptreact,typescript,typescriptreact"},"object-assign-copy-shallow-clone--72fede8":{"prefix":["base object assign copy"],"body":["Object.assign({}, ${1:original}, ${2:source})"],"description":"Object.assign copy (shallow clone)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"return-0c23964":{"prefix":["base return"],"body":["return ${0};"],"description":"return","scope":"javascript,javascriptreact,typescript,typescriptreact"},"return-promise-es6--fd35485":{"prefix":["base return promise"],"body":["return new Promise((resolve, reject) => {\n\t${0}\n});"],"description":"return Promise (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"return-complex-value-such-as-jsx-components--782bfcc":{"prefix":["base return complex value"],"body":["return (\n\t${0}\n);"],"description":"return complex value (such as JSX components)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"typeof-19ce7c6":{"prefix":["base typeof"],"body":["typeof ${1:source} === '${2:undefined}'"],"description":"typeof","scope":"javascript,javascriptreact,typescript,typescriptreact"},"instanceof-8bb3070":{"prefix":["base instanceof"],"body":["${1:source} instanceof ${2:Object}"],"description":"instanceof","scope":"javascript,javascriptreact,typescript,typescriptreact"},"promise-es6--f34bc97":{"prefix":["base promise"],"body":["new Promise((resolve, reject) => {\n\t${0}\n})"],"description":"Promise (ES6)","scope":"javascript,javascriptreact,typescript,typescriptreact"},"promise-then-e996760":{"prefix":["base promise then"],"body":["${1:promise}.then((${2:value}) => {\n\t${0}\n})"],"description":"Promise.then","scope":"javascript,javascriptreact,typescript,typescriptreact"},"promise-catch-f342220":{"prefix":["base promise catch"],"body":["${1:promise}.catch((${2:err}) => {\n\t${0}\n})"],"description":"Promise.catch","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exportnamedvariable-78bb381":{"prefix":["base export named variable"],"body":["export const ${1:exportVariable} = ${2:localVariable};\n"],"description":"Export named variable in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exportnamedfunction-181a9c8":{"prefix":["base export named function"],"body":["export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n"],"description":"Export named function in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exportdefaultfunction-30a2855":{"prefix":["base export default function"],"body":["export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n"],"description":"Export default function in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exportclass-b3bf75f":{"prefix":["base export class"],"body":["export default class ${1:className} {\n\t$0\n};\n"],"description":"Export default class in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exportclassextends-97fc7f4":{"prefix":["base export class extends"],"body":["export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n"],"description":"Export default class which extends a base one in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"import-a1eb24c":{"prefix":["base import"],"body":["import ${2:moduleName} from '${1:module}';$0"],"description":"Imports entire module statement in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"importnomodulename-ef6ff1d":{"prefix":["base import no module name"],"body":["import '${1:module}';$0"],"description":"Imports entire module in ES6 syntax without module name","scope":"javascript,javascriptreact,typescript,typescriptreact"},"importdestructing-d98cd10":{"prefix":["base import destructing"],"body":["import { $2 } from '${1:module}';$0"],"description":"Imports only a portion of the module in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"importeverything-254070b":{"prefix":["base import everything"],"body":["import * as ${2:alias} from '${1:module}';$0"],"description":"Imports everything as alias from the module in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"importas-9e11ffa":{"prefix":["base import as"],"body":["import { ${2:originalName} as ${3:alias} } from '${1:module}';$0"],"description":"Imports a specific portion of the module by assigning a local alias in ES6 syntax","scope":"javascript,javascriptreact,typescript,typescriptreact"},"require-542391c":{"prefix":["base require"],"body":["require('${1:module}');"],"description":"require","scope":"javascript,javascriptreact,typescript,typescriptreact"},"require-local-8efd416":{"prefix":["base require local"],"body":["require('./${1:module}');"],"description":"require local","scope":"javascript,javascriptreact,typescript,typescriptreact"},"require-assignment-b360ddf":{"prefix":["base require assignment"],"body":["const ${1:module} = require('${1:module}');"],"description":"require assignment","scope":"javascript,javascriptreact,typescript,typescriptreact"},"require-assignment-local-1f4f925":{"prefix":["base require assignment local"],"body":["const ${1:module} = require('./${1:module}');"],"description":"require assignment local","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructuring-require-assignment-3246472":{"prefix":["base require assignment"],"body":["const {${1:module}} = require('${1:module}');"],"description":"destructuring require assignment","scope":"javascript,javascriptreact,typescript,typescriptreact"},"destructuring-require-assignment-local-6e9014c":{"prefix":["base require assignment local destruct"],"body":["const {${1:module}} = require('./${1:module}');"],"description":"destructuring require assignment local","scope":"javascript,javascriptreact,typescript,typescriptreact"},"exports-member-c1002a1":{"prefix":["base exports member"],"body":["exports.${1:member} = ${2:value};"],"description":"exports.member","scope":"javascript,javascriptreact,typescript,typescriptreact"},"module-exports-7a7a786":{"prefix":["base module exports"],"body":["module.exports = ${1:name};"],"description":"module.exports","scope":"javascript,javascriptreact,typescript,typescriptreact"},"module-exports-object-943f52d":{"prefix":["base module exports object"],"body":["module.exports = {\n\t${1:member}\n};"],"description":"module exports object","scope":"javascript,javascriptreact,typescript,typescriptreact"},"event-handler-37f565f":{"prefix":["base event handler"],"body":["${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n});"],"description":"event handler","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoleassert-a5f4e69":{"prefix":["base console assert"],"body":["console.assert(${1:expression}, ${2:object});"],"description":"If the specified expression is false, the message is written to the console along with a stack trace","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoleclear-d9e0118":{"prefix":["base console clear"],"body":["console.clear();"],"description":"Clears the console","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolecount-9c5f7ea":{"prefix":["base console count"],"body":["console.count(${1:label});"],"description":"Writes the the number of times that count() has been invoked at the same line and with the same label","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoledebug-edf85f8":{"prefix":["base console debug"],"body":["console.debug(${1:object});"],"description":"Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoledir-faf0292":{"prefix":["base console dir"],"body":["console.dir(${1:object});"],"description":"Prints a JavaScript representation of the specified object","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoleerror-1c4c6bc":{"prefix":["base console error"],"body":["console.error(${1:object});"],"description":"Displays a message in the console and also includes a stack trace from where the method was called","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolegroup-7ad240a":{"prefix":["base console group"],"body":["console.group('${1:label}');"],"description":"Groups and indents all following output by an additional level, until console.groupEnd() is called.","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolegroupend-fe2f5e4":{"prefix":["base console group end"],"body":["console.groupEnd();"],"description":"Closes out the corresponding console.group().","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolelog-a7a4472":{"prefix":["base console log"],"body":["console.log(${1:object});"],"description":"Displays a message in the console","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolelogobject-2197f96":{"prefix":["base console log object"],"body":["console.log('${1:object} :>> ', ${1:object});"],"description":"Displays an object in the console with its name","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoletrace-33e4543":{"prefix":["base console trace"],"body":["console.trace(${1:object});"],"description":"Prints a stack trace from the point where the method was called","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consolewarn-1ddec9c":{"prefix":["base console warn"],"body":["console.warn(${1:object});"],"description":"Displays a message in the console but also displays a yellow warning icon along with the logged message","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoleinfo-9aaf424":{"prefix":["base console info"],"body":["console.info(${1:object});"],"description":"Displays a message in the console but also displays a blue information icon along with the logged message","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoletable-35c244f":{"prefix":["base console table"],"body":["console.table(${1:object});"],"description":"Displays tabular data as a table.","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoletime-c352d2d":{"prefix":["base console time"],"body":["console.time(${1:object});"],"description":"Sets starting point for execution time measurement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"consoletimeend-edc0765":{"prefix":["base console time end"],"body":["console.timeEnd(${1:object});"],"description":"Sets end point for execution time measurement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"settimeout-1eb369f":{"prefix":["base set timeout"],"body":["setTimeout(() => {\n\t${0}\n}, ${1:delay});"],"description":"setTimeout","scope":"javascript,javascriptreact,typescript,typescriptreact"},"setinterval-25bbd90":{"prefix":["base set interval"],"body":["setInterval(() => {\n\t${0}\n}, ${1:delay});"],"description":"setInterval","scope":"javascript,javascriptreact,typescript,typescriptreact"},"setimmediate-44177fa":{"prefix":["base set immediate"],"body":["setImmediate(() => {\n\t${0}\n});"],"description":"setImmediate","scope":"javascript,javascriptreact,typescript,typescriptreact"},"process-nexttick-9043b4d":{"prefix":["base process next tick"],"body":["process.nextTick(() => {\n\t${0}\n});"],"description":"process nextTick","scope":"javascript,javascriptreact,typescript,typescriptreact"},"insert-use-strict-statement-dbe202c":{"prefix":["base use strict"],"body":["'use strict';"],"description":"insert 'use strict' statement","scope":"javascript,javascriptreact,typescript,typescriptreact"},"svelte-component-format-982a27e":{"prefix":["svelte component template","svcomponent"],"body":["<script>","\t${1:// your script goes here}","</script>","","<style>","\t${2:/* your styles go here */}","</style>","","${3:<!-- markup (zero or more items) goes here -->}"],"scope":"svelte","description":" "},"svelte-script-tag-78f8ac7":{"prefix":["svelte script","svscript"],"body":["<script>","\t${1:// your script goes here}","</script>"],"scope":"svelte","description":" "},"svelte-script-context-cecabc4":{"prefix":["svelte script context","svscriptc"],"body":["<script context=\"module\">","\t${1:// your script goes here}","</script>"],"scope":"svelte","description":"add a script with context=\"module\" to your svelte file"},"svelte-style-tag-e05677d":{"prefix":["svelte style","svstyle"],"body":["<style>","\t${1:/* your styles go here */}","</style>"],"scope":"svelte","description":"add styles to your svelte file"},"svelte-expression-5b72c87":{"prefix":["svelte expression","svexp"],"body":["{${1:expression}}"],"scope":"svelte","description":" "},"svelte-expression-html-8324312":{"prefix":["svelte expression html","svexphtml"],"body":["{@html ${1:expression}}"],"scope":"svelte","description":" "},"svelte-expression-debug-2d4633b":{"prefix":["svelte expression debug","svexpdebug"],"body":["{@debug ${1:var1}${2:,var2}}"],"scope":"svelte","description":" "},"svelte-if-block-47b4456":{"prefix":["svelte if-block","svif"],"body":["{#if ${1:condition}}","\t${2: <!-- content here -->}","{/if}"],"scope":"svelte","description":"if block"},"svelte-if-else-block-ae93555":{"prefix":["svelte if else","svif-else"],"body":["{#if ${1:condition}}","\t${2: <!-- content here -->}","{:else}","\t${3: <!-- else content here -->}","{/if}"],"scope":"svelte","description":" "},"svelte-else-block-5b02f5a":{"prefix":["svelte else","svelse"],"body":["{:else}","\t${1: <!-- else content here -->}"],"scope":"svelte","description":" "},"svelte-if-else-if-block-1de3af5":{"prefix":["svelte if else if","svif-else-if"],"body":["{#if ${1:condition}}","\t${2: <!-- content here -->}","{:else if ${3: otherCondition}}","\t${4: <!-- else if content here -->}","{:else}","\t${5: <!-- else content here -->}","{/if}"],"scope":"svelte","description":" "},"svelte-else-if-block-f15a20e":{"prefix":["svelte else if","svelse-if"],"body":["{:else if ${1: otherCondition}}","\t${2: <!-- else if content here -->}"],"scope":"svelte","description":" "},"svelte-each-block-29f3c4c":{"prefix":["svelte each","sveach"],"body":["{#each ${1:items} as ${2:item}}","\t${3: <!-- content here -->}","{/each}"],"scope":"svelte","description":"each block"},"svelte-each-else-block-d0133f7":{"prefix":["svelte each else","sveach-else"],"body":["{#each ${1:items} as ${2:item}}","\t${3: <!-- content here -->}","{:else}","\t${4: <!-- empty list -->}","{/each}"],"scope":"svelte","description":" "},"svelte-each-index-block-3158d3e":{"prefix":["svelte each index","sveach-index"],"body":["{#each ${1:items} as ${2:item}, ${3:i}}","\t${4: <!-- content here -->}","{/each}"],"scope":"svelte","description":" "},"svelte-each-key-block-a52a03f":{"prefix":["svelte each key","sveach-key"],"body":["{#each ${1:items} as ${2:item}, (${3:key})}","\t${4: <!-- content here -->}","{/each}"],"scope":"svelte","description":" "},"svelte-each-index-key-block-ba50127":{"prefix":["svelte each index key","sveach-i-k"],"body":["{#each ${1:items} as ${2:item}, i (${3:key})}","\t${4: <!-- content here -->}","{/each}"],"scope":"svelte","description":" "},"svelte-await-then-block-1a4f736":{"prefix":["svelte await then","svawait"],"body":["{#await ${1:promise}}","\t${2: <!-- content when promise is pending -->}","{:then ${3:value}}","\t${4: <!-- content when promise was fulfilled -->}","{/await}"],"scope":"svelte","description":" "},"svelte-then-block-32708ef":{"prefix":["svelte then","svthen"],"body":["{:then ${1:value}}","\t${2: <!-- content when promise was fulfilled -->}"],"scope":"svelte","description":" "},"svelte-await-short-block-5a99742":{"prefix":["svelte await short","svawait-short"],"body":["{#await ${1:promise} then ${2:value}}","\t${3: <!-- content when promise was fulfilled -->}","{/await}"],"scope":"svelte","description":" "},"svelte-await-catch-block-c771592":{"prefix":["svelte await catch","svawait-catch"],"body":["{#await ${1:promise}}","\t${2: <!-- content when promise is pending -->}","{:then ${3:value}}","\t${4: <!-- content when promise was fulfilled -->}","{:catch error}","\t${5: <!-- content when promise was rejected -->}","{/await}"],"scope":"svelte","description":" "},"svelte-catch-block-6e38ff2":{"prefix":["svelte catch","svcatch"],"body":["{:catch error}","\t<!-- promise was rejected -->"],"scope":"svelte","description":" "},"svelte-on-event-fab6b5e":{"prefix":["svelte on event","svon"],"body":["on:${1:eventname}={${2:handler}}"],"scope":"svelte","description":"on event"},"svelte-on-event-forward-e20c24e":{"prefix":["svelte on event foward","svon-foward"],"body":["on:${1:eventname}"],"scope":"svelte","description":" "},"svelte-on-event-modifiers-e3da84f":{"prefix":["svelte on event modifiers","svon-modifiers"],"body":["on:${1:eventname}|${2|preventDefault,stopPropagation,passive,capture,once|}={${3:handler}}"],"scope":"svelte","description":" "},"svelte-on-event-inline-868e3a0":{"prefix":["svelte on event inline","svon-inline"],"body":["on:${1:click}=\"{() => ${2:count += 1}}\""],"scope":"svelte","description":" "},"svelte-modifiers-a999211":{"prefix":["svelte modifier","svmodifier"],"body":["|${1|preventDefault,stopPropagation,passive,capture,once|}"],"scope":"svelte","description":" "},"svelte-bind-be61264":{"prefix":["svelte bind","svbind-simple"],"body":["bind:${1:property}"],"scope":"svelte","description":" "},"svelte-bind-property-dfb6f96":{"prefix":["svelte bind property","svbind-property"],"body":["bind:${1:property}={${2:variable}}"],"scope":"svelte","description":" "},"svelte-bind-video-4f6a330":{"prefix":["svelte bind video","svbind-video"],"body":["<video","src={${1:clip}}","bind:${2:duration}","bind:${3:buffered}","bind:${4:seekable}","bind:${5:played}","bind:${6:currentTime}","bind:${7:paused}","bind:${8:volume}","></video>"],"scope":"svelte","description":" "},"svelte-bind-block-level-0983836":{"prefix":["svelte bind level","svbind-level"],"body":["bind:${1|clientWidth,clientHeight,offsetWidth,offsetHeight|}={${2:variable}}"],"scope":"svelte","description":" "},"svelte-bind-group-b447704":{"prefix":["svelte bind group","svbind-group"],"body":["bind:group={${1:variable}}"],"scope":"svelte","description":" "},"svelte-bind-this-3e68305":{"prefix":["svelte bind this","svbind-this"],"body":["bind:this={${1:dom_node}}"],"scope":"svelte","description":" "},"svelte-class-a2634f2":{"prefix":["svelte class","svcl"],"body":["class:${1:name}={${2:condition}}"],"scope":"svelte","description":" "},"svelte-class-short-ec9b637":{"prefix":["svelte class short","svcls"],"body":["class:${1:name}}"],"scope":"svelte","description":" "},"svelte-use-2dd543c":{"prefix":["svelte use","svu"],"body":["use:action"],"scope":"svelte","description":" "},"svelte-use-parameters-b5f7253":{"prefix":["svelte use parameters","svupar"],"body":["use:action={${1:parameters}}"],"scope":"svelte","description":" "},"svelte-transition-9d61562":{"prefix":["svelte transition","svt"],"body":["${1|transition,in,out|}:${2:name}"],"scope":"svelte","description":" "},"svelte-transition-params-175c775":{"prefix":["svelte transition params","svtp"],"body":["${1|transition,in,out|}:${2:name}={${3:params}}"],"scope":"svelte","description":" "},"svelte-transition-events-80bd75d":{"prefix":["svelte transition events","svte"],"body":["on:${1|introstart,introend,outrostart,outroend|}=\"{() => status = '${1|introstart,introend,outrostart,outroend|}'}\""],"scope":"svelte","description":" "},"svelte-transition-local-260cb40":{"prefix":["svelte transition local","svtl"],"body":["${1|transition,in,out|}:${2:name}|${3:local}"],"scope":"svelte","description":" "},"svelte-transition-all-61ca20f":{"prefix":["svelte transition all","svta"],"body":["${1|transition,in,out|}:${2:name}|${3:local}={${4:params}}"],"scope":"svelte","description":" "},"svelte-animate-67c212f":{"prefix":["svelte animate","sva"],"body":["animate:${1:name}={${2:params}}"],"scope":"svelte","description":" "},"svelte-slot-b0faa48":{"prefix":["svelte slot","svsl"],"body":["<slot>${1:<!-- optional fallback -->}</slot>"],"scope":"svelte","description":" "},"svelte-slot-name-c31b3bf":{"prefix":["svelte slot name","svsn"],"body":["<slot name=\"${1:x}\">${2:<!-- optional fallback -->}</slot>"],"scope":"svelte","description":" "},"svelte-slot-prop-7c2be03":{"prefix":["svelte slot prop","svsp"],"body":["<slot ${1:prop}={${2:value}}>${3:<!-- optional fallback -->}</slot>"],"scope":"svelte","description":" "},"svelte-self-7f3e2a3":{"prefix":["svelte self","svse"],"body":["<svelte:self />"],"scope":"svelte","description":" "},"svelte-self-prop-9aca214":{"prefix":["svelte self prop","svsep"],"body":["<svelte:self ${1:prop}={${2:value}} />"],"scope":"svelte","description":" "},"svelte-component-4f6ec24":{"prefix":["svelte component","svc"],"body":["<svelte:component this={${1:component}} />"],"scope":"svelte","description":" "},"svelte-window-4ce8385":{"prefix":["svelte window","svw"],"body":["<svelte:window />"],"scope":"svelte","description":" "},"svelte-window-bind-20b44db":{"prefix":["svelte window bind","svwb"],"body":["bind:${1|innerWidth,innerHeight,outerWidth,outerHeight,scrollX,scrollY,online|}={${2:variable}}"],"scope":"svelte","description":" "},"svelte-body-2429eca":{"prefix":["svelte body","svb"],"body":["<svelte:body />"],"scope":"svelte","description":" "},"svelte-head-644e175":{"prefix":["svelte head","svh"],"body":["<svelte:head>","\t${1:<!-- head content -->}","</svelte:head>"],"scope":"svelte","description":" "},"svelte-options-2311f78":{"prefix":["svelte options","svop"],"body":["<svelte:options ${1|immutable,accessors,namespace,tag|}={${2:value}}/>"],"scope":"svelte","description":" "},"svelte-create-component-a2acf5f":{"prefix":["svelte create component","svcreate-component"],"body":["const component = new ${1:App}({","\ttarget: ${2|target,document.body|},","\tprops: ${3:props},","\tanchor: ${4:anchor},","\thydrate: ${5|false,true|},","\tintro: ${5|false,true|}","})"],"scope":"javascript","description":" "},"svelte-reactive-statement-a8bf169":{"prefix":["svelte reactive statement","svrs"],"body":["$: ${1:variable} = ${2:prop}"],"scope":"javascript","description":" "},"svelte-reactive-block-6ff1da3":{"prefix":["svelte reactive","svrb"],"body":["$: { ${1:console.log(${2:prop});}}"],"scope":"javascript","description":" "},"svelte-action-35c79a4":{"prefix":["svelte action","svaction"],"body":["function ${1:foo}(node) {","\t// the node has been mounted in the DOM","\treturn {","\t\tdestroy() {","\t\t\t// the node has been removed from the DOM","\t\t}","\t};","}"],"scope":"javascript","description":" "},"svelte-action-parameters-be2e155":{"prefix":["svelte action parameters","svactionp"],"body":["function ${1:foo}(node, ${2:parameters}) {","\t// the node has been mounted in the DOM","\treturn {","\t\tdestroy() {","\t\t\t// the node has been removed from the DOM","\t\t}","\t};","}"],"scope":"javascript","description":" "},"svelte-action-update-10deb9d":{"prefix":["svelte action update","svactionu"],"body":["function ${1:foo}(node, ${2:parameters}) {","\t// the node has been mounted in the DOM","\treturn {","\t\tupdate(${2:parameters}) {","\t\t\t// the value of `${2:parameters}` has changed","\t\t}","\t\tdestroy() {","\t\t\t// the node has been removed from the DOM","\t\t}","\t};","}"],"scope":"javascript","description":" "},"svelte-on-mount-99a1f61":{"prefix":["svelte lifecycle mount","svlfm"],"body":["onMount(() => {","\t${1:// content here}","});"],"scope":"javascript","description":" "},"svelte-before-update-3e7c285":{"prefix":["svelte lifecycle before update","svlfbu"],"body":["beforeUpdate(() => {","\t${1:// content here}","});"],"scope":"javascript","description":" "},"svelte-after-update-84ce070":{"prefix":["svelte lifecycle-after-update","svlfap"],"body":["afterUpdate(() => {","\t${1:// content here}","});"],"scope":"javascript","description":" "},"svelte-on-destroy-5975c83":{"prefix":["svelte lifecycle destroy","svlfd"],"body":["onDestroy(() => {","\t${1:// content here}","});"],"scope":"javascript","description":" "},"svelte-tick-c4517ea":{"prefix":["svelte tick","sv-tick"],"body":["await tick()"],"scope":"javascript","description":" "},"svelte-set-context-d63bd58":{"prefix":["svelte set content","sv-content"],"body":["setContext(${1:key}, ${2:context})"],"scope":"javascript","description":" "},"svelte-get-context-38971c4":{"prefix":["svelte get content","svgetc"],"body":["getContext(${1:key})"],"scope":"javascript","description":" "},"svelte-dispatch-9cbd3fc":{"prefix":["svelte dispatch","svdp"],"body":["const dispatch = createEventDispatcher();"],"scope":"javascript","description":" "},"svelte-dispatch-event-1ca1919":{"prefix":["svelte dispatch event","svdpe"],"body":["dispatch(${1:key},${2:data})"],"scope":"javascript","description":" "},"svelte-writeable-124296d":{"prefix":["svelte writeable","svw"],"body":["const ${1:store} = writable(${2:initialValue});"],"scope":"javascript","description":" "},"svelte-writeable-set-fcf8c72":{"prefix":["svelte writeable set","svwt"],"body":["const ${1:store} = writable(${2:initialValue}, () => {","\t${3:console.log('got a subscriber');}","\treturn () => ${4:console.log('no more subscribers');}","});"],"scope":"javascript","description":" "},"svelte-readable-09d2a19":{"prefix":["svelte readable","svr"],"body":["const ${1:store} = readable(${2:initialValue}, () => {","\t${3:console.log('got a subscriber');}","\treturn () => ${4:console.log('no more subscribers');}","});"],"scope":"javascript","description":" "},"svelte-derived-2962ecf":{"prefix":["svelte derived","svder"],"body":["const ${1:derivedStore} = derived(${2:storeA}, $${2:storeA} => $${2:storeA} * 2);"],"scope":"javascript","description":" "},"svelte-derived-multiple-ca89746":{"prefix":["svelte derived multiple","svderm"],"body":["const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([$${2:storeA}, $${3:storeB}]) => $${2:storeA} + $${3:storeB});"],"scope":"javascript","description":" "},"svelte-derived-set-e4b6d8d":{"prefix":["svelte derived set","svders"],"body":["const ${1:derivedStore} = derived(${2:storeA}, ($${2:storeA}, set) => {","\tsetTimeout(() => set($${2:storeA}), 1000);","}, 'one moment...');"],"scope":"javascript","description":" "},"svelte-derived-multiple-set-8665b32":{"prefix":["svelte derived multiple set","svderms"],"body":["const ${1:derivedStore} = derived([${2:storeA}, ${3:storeB}], ([$${2:storeA}, $${3:storeB}], set) => {","\tsetTimeout(() => set($${2:storeA} + $${3:storeB}), 1000);","}, 'one moment...');"],"scope":"javascript","description":" "},"svelte-store-get-6ec5143":{"prefix":["svelte store-get-value","svstoregm"],"body":["const ${1:value} = get(${2:store});"],"scope":"javascript","description":" "},"svelte-component-set-d5f1c65":{"prefix":["svelte component set","svcoms"],"body":["${1:component}.$set(${2: params});"],"scope":"javascript","description":" "},"svelte-component-on-2e8de76":{"prefix":["svelte component on","svcomon"],"body":["${1:component}.$on(${2:eventname}, ${3:handler});"],"scope":"javascript","description":" "},"svelte-component-destroy-70aecfe":{"prefix":["svelte component destroy","svcomd"],"body":["${1:component}.$destroy();"],"scope":"javascript","description":" "},"svelte-render-component-3fc68c8":{"prefix":["svelte render component","svrcom"],"body":["const { head, html, css } = ${1:App}.render({","\tprops: ${3:props},","})"],"scope":"javascript","description":" "},"svelte-tweened-6cfc746":{"prefix":["svelte tweened","svtw"],"body":["const ${1:store} = tweened(${2:value}, ${3:options});"],"scope":"javascript","description":" "},"svelte-spring-41443dd":{"prefix":["svelte spring","svsp"],"body":["const ${1:store} = spring(${2:value}, ${3:options});"],"scope":"javascript","description":" "},"svelte-register-b4c5f52":{"prefix":["svelte register","svreg"],"body":["require('svelte/register');","const ${1:App} = require('${2:./App.svelte}').default;"],"scope":"javascript","description":" "},"svelte-routing-import-be21f89":{"prefix":["svelte import routing","svroute"],"body":["import { Route, Router } from 'svelte-routing'"],"scope":"javascript","description":" "},"svelte-global-style-55164a1":{"prefix":["svelte global style","svsglobal"],"body":[":global(${1:body}) {","\t/* this will apply to <body> */","\t${2:/* your styles go here */}","}"],"scope":"css","description":" "}}